{
  "version": 3,
  "sources": [
    "../../rchain/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAiHK;;AAAA;AAAA;AAAA;;AAAA;AAjHL;;;AAAA;AAAA;;AAiHK;;;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AAtFL;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsFK;;;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAzCL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyCK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AA5BL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AA4BK;;;AAAA;;AA5BL;;AAAA;;;;;;;;;AA4BA;;;AAEQ;;AAA+B;;AAA/B;AACA;AAA8B;;AAA9B;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;;;;;;;;;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AAOO;;AAAA;;AAAmB;;AAAnB;AAAP;AAGA;AAIa;;;AADE;;;;;;;;AADA;;;;;;;AADJ;;;AADX;;;;AAAA;;;AAAA;AASA;AACgB;AAAA;AAAA;AAAA;AACI;;AAEF;;;;AADA;;;;;;;AAHlB;;;AAAA;;;AAAA;AAOA;AACgB;AAAA;AAAA;AAAA;AACI;;AAEF;;;;AADA;;;;;;;AAHlB;;;AAAA;;;AAAA;AAOA;AACgB;AAAA;AAAA;AAAA;AACI;;AAEF;;;;AADA;;;;;;;AAHlB;;;AAAA;;;AAAA;;AAUR;;;AAEe;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AACO;AAAkB;;;AAAlB;AAAP;AAEoB;;;;AAAjB;AAAX;;;AAC0C;;AAAvB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAStB;AAEoB;;AACF;;;;;;;AAHlB;;;AAAA;;;AAAA;;AARK;;AAAiB;;;;;AAAjB;AAAb;;;AAC0C;;AAAvB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;;;;AAEU;;AAArB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;;;;AAY9B;;;AAEgB;;AAA2B;AAAA;AAAA;AAAA;AAA8B;AAAA;;AAAA;AAAA;AAA9B;AAA3B;AAAR;AAIyC;;AAA3B;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACd;AAAA;AAE6C;AAAA;;AAAA;AAAA;AAAd;AAA+C;AAAhD;AAI9B;AACgB;AAAA;;AAAA;AAAA;;;;;;;;;;;AADhB;;;AAAA;;;AAAA;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAEA;AAA8B;;AAA9B;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 100"
    },
    "7": {
      "op": "bytecblock \"Bronze_id\" \"Silver_id\" \"Gold_id\" \"last_distribution_time\" \"total_amount_left\" \"usdt_asset_id\" \"recipient_funding_left\" \"distribution_percentage\" \"distribution_interval\""
    },
    "161": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "163": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "166": {
      "op": "pushbytess 0x84747fc7 0x1574535a 0x93b0b60d 0xedce12d6 // method \"initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void\", method \"opt_in_to_asset(pay)void\", method \"buyAndMint(uint64,pay)void\", method \"AllocateFunds(account)void\""
    },
    "188": {
      "op": "txna ApplicationArgs 0"
    },
    "191": {
      "op": "match main_initialise_route@3 main_opt_in_to_asset_route@4 main_buyAndMint_route@5 main_AllocateFunds_route@6"
    },
    "201": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "202": {
      "op": "return"
    },
    "203": {
      "block": "main_AllocateFunds_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "205": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "206": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "207": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "209": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "210": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "213": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "214": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "216": {
      "callsub": "smart_contracts.rchain.contract.Rchain.AllocateFunds",
      "op": "callsub AllocateFunds",
      "stack_out": []
    },
    "219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "return"
    },
    "221": {
      "block": "main_buyAndMint_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "223": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "224": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "225": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "227": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "228": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "231": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "232": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "234": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "1"
      ]
    },
    "235": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "gtxn_idx%1#0"
      ]
    },
    "236": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "237": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "239": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "240": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "241": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%38#0",
        "gtxn_idx%1#0"
      ]
    },
    "242": {
      "callsub": "smart_contracts.rchain.contract.Rchain.buyAndMint",
      "op": "callsub buyAndMint",
      "stack_out": []
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return"
    },
    "247": {
      "block": "main_opt_in_to_asset_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "249": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "250": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "253": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "254": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "256": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "1"
      ]
    },
    "257": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "258": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "259": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "261": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "262": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "263": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "264": {
      "callsub": "smart_contracts.rchain.contract.Rchain.opt_in_to_asset",
      "op": "callsub opt_in_to_asset",
      "stack_out": []
    },
    "267": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "268": {
      "op": "return"
    },
    "269": {
      "block": "main_initialise_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "271": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "272": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "273": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "275": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "276": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "279": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "280": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "282": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "285": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "286": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "289": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "290": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "293": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "294": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "296": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "299": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%18#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "300": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0"
      ]
    },
    "302": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "305": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "306": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0"
      ]
    },
    "308": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "311": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "312": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%25#0"
      ]
    },
    "314": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "317": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "318": {
      "callsub": "smart_contracts.rchain.contract.Rchain.initialise",
      "op": "callsub initialise",
      "stack_out": []
    },
    "321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "322": {
      "op": "return"
    },
    "323": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "325": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "328": {
      "op": "txn ApplicationID"
    },
    "330": {
      "op": "!"
    },
    "331": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "332": {
      "op": "intc_1 // 1"
    },
    "333": {
      "op": "return"
    },
    "334": {
      "subroutine": "smart_contracts.rchain.contract.Rchain.initialise",
      "params": {
        "usdt_id#0": "uint64",
        "distribution_interval#0": "uint64",
        "total_amount_to_raise#0": "uint64",
        "Recipient#0": "bytes",
        "bronze_id#0": "uint64",
        "silver_id#0": "uint64",
        "gold_id#0": "uint64",
        "Recipient_funding_left#0": "uint64"
      },
      "block": "initialise",
      "stack_in": [],
      "op": "proto 8 0"
    },
    "337": {
      "op": "bytec 7 // \"distribution_percentage\"",
      "defined_out": [
        "\"distribution_percentage\""
      ],
      "stack_out": [
        "\"distribution_percentage\""
      ]
    },
    "339": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "\"distribution_percentage\"",
        "70"
      ],
      "stack_out": [
        "\"distribution_percentage\"",
        "70"
      ]
    },
    "341": {
      "op": "app_global_put",
      "stack_out": []
    },
    "342": {
      "op": "bytec_3 // \"last_distribution_time\""
    },
    "343": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_distribution_time\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"last_distribution_time\"",
        "new_state_value%0#0"
      ]
    },
    "345": {
      "op": "app_global_put",
      "stack_out": []
    },
    "346": {
      "op": "bytec 4 // \"total_amount_left\"",
      "defined_out": [
        "\"total_amount_left\""
      ],
      "stack_out": [
        "\"total_amount_left\""
      ]
    },
    "348": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"total_amount_left\"",
        "total_amount_to_raise#0 (copy)"
      ],
      "stack_out": [
        "\"total_amount_left\"",
        "total_amount_to_raise#0 (copy)"
      ]
    },
    "350": {
      "op": "app_global_put",
      "stack_out": []
    },
    "351": {
      "op": "bytec 8 // \"distribution_interval\"",
      "defined_out": [
        "\"distribution_interval\""
      ],
      "stack_out": [
        "\"distribution_interval\""
      ]
    },
    "353": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"distribution_interval\"",
        "distribution_interval#0 (copy)"
      ],
      "stack_out": [
        "\"distribution_interval\"",
        "distribution_interval#0 (copy)"
      ]
    },
    "355": {
      "op": "app_global_put",
      "stack_out": []
    },
    "356": {
      "op": "pushbytes \"recipient\"",
      "defined_out": [
        "\"recipient\""
      ],
      "stack_out": [
        "\"recipient\""
      ]
    },
    "367": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"recipient\"",
        "Recipient#0 (copy)"
      ],
      "stack_out": [
        "\"recipient\"",
        "Recipient#0 (copy)"
      ]
    },
    "369": {
      "op": "app_global_put",
      "stack_out": []
    },
    "370": {
      "op": "bytec 5 // \"usdt_asset_id\"",
      "defined_out": [
        "\"usdt_asset_id\""
      ],
      "stack_out": [
        "\"usdt_asset_id\""
      ]
    },
    "372": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"usdt_asset_id\"",
        "usdt_id#0 (copy)"
      ],
      "stack_out": [
        "\"usdt_asset_id\"",
        "usdt_id#0 (copy)"
      ]
    },
    "374": {
      "op": "app_global_put",
      "stack_out": []
    },
    "375": {
      "op": "bytec_0 // \"Bronze_id\"",
      "defined_out": [
        "\"Bronze_id\""
      ],
      "stack_out": [
        "\"Bronze_id\""
      ]
    },
    "376": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"Bronze_id\"",
        "bronze_id#0 (copy)"
      ],
      "stack_out": [
        "\"Bronze_id\"",
        "bronze_id#0 (copy)"
      ]
    },
    "378": {
      "op": "app_global_put",
      "stack_out": []
    },
    "379": {
      "op": "bytec_1 // \"Silver_id\"",
      "defined_out": [
        "\"Silver_id\""
      ],
      "stack_out": [
        "\"Silver_id\""
      ]
    },
    "380": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"Silver_id\"",
        "silver_id#0 (copy)"
      ],
      "stack_out": [
        "\"Silver_id\"",
        "silver_id#0 (copy)"
      ]
    },
    "382": {
      "op": "app_global_put",
      "stack_out": []
    },
    "383": {
      "op": "bytec_2 // \"Gold_id\"",
      "defined_out": [
        "\"Gold_id\""
      ],
      "stack_out": [
        "\"Gold_id\""
      ]
    },
    "384": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"Gold_id\"",
        "gold_id#0 (copy)"
      ],
      "stack_out": [
        "\"Gold_id\"",
        "gold_id#0 (copy)"
      ]
    },
    "386": {
      "op": "app_global_put",
      "stack_out": []
    },
    "387": {
      "op": "bytec 6 // \"recipient_funding_left\"",
      "defined_out": [
        "\"recipient_funding_left\""
      ],
      "stack_out": [
        "\"recipient_funding_left\""
      ]
    },
    "389": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"recipient_funding_left\"",
        "Recipient_funding_left#0 (copy)"
      ],
      "stack_out": [
        "\"recipient_funding_left\"",
        "Recipient_funding_left#0 (copy)"
      ]
    },
    "391": {
      "op": "app_global_put",
      "stack_out": []
    },
    "392": {
      "retsub": true,
      "op": "retsub"
    },
    "393": {
      "subroutine": "smart_contracts.rchain.contract.Rchain.opt_in_to_asset",
      "params": {
        "mbrpay#0": "uint64"
      },
      "block": "opt_in_to_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "396": {
      "op": "txn Sender"
    },
    "398": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "400": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "401": {
      "op": "assert",
      "stack_out": []
    },
    "402": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrpay#0 (copy)"
      ],
      "stack_out": [
        "mbrpay#0 (copy)"
      ]
    },
    "404": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "406": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "408": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "409": {
      "op": "assert",
      "stack_out": []
    },
    "410": {
      "op": "itxn_begin"
    },
    "411": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "412": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "414": {
      "op": "pushbytes \"Demo\"",
      "defined_out": [
        "\"Demo\""
      ],
      "stack_out": [
        "\"Demo\""
      ]
    },
    "420": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "422": {
      "op": "pushbytes \"Tex\"",
      "defined_out": [
        "\"Tex\""
      ],
      "stack_out": [
        "\"Tex\""
      ]
    },
    "427": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "429": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100"
      ],
      "stack_out": [
        "100"
      ]
    },
    "430": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "432": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "434": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "437": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "439": {
      "op": "itxn_submit"
    },
    "440": {
      "op": "itxn_begin"
    },
    "441": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "442": {
      "op": "bytec_0 // \"Bronze_id\"",
      "defined_out": [
        "\"Bronze_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"Bronze_id\""
      ]
    },
    "443": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "444": {
      "error": "check self.Bronze_id exists",
      "op": "assert // check self.Bronze_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "445": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "447": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_AssetSender_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_AssetSender_idx_0#0"
      ]
    },
    "449": {
      "op": "itxn_field AssetSender",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "451": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "452": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "454": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "456": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "458": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "459": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "461": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "462": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "464": {
      "op": "itxn_submit"
    },
    "465": {
      "op": "itxn_begin"
    },
    "466": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "467": {
      "op": "bytec_1 // \"Silver_id\"",
      "defined_out": [
        "\"Silver_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"Silver_id\""
      ]
    },
    "468": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "469": {
      "error": "check self.Silver_id exists",
      "op": "assert // check self.Silver_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "470": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ]
    },
    "472": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%2%%param_AssetSender_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%2%%param_AssetSender_idx_0#0"
      ]
    },
    "474": {
      "op": "itxn_field AssetSender",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ]
    },
    "476": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "477": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ]
    },
    "479": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "481": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "483": {
      "op": "intc_2 // axfer",
      "stack_out": [
        "axfer"
      ]
    },
    "484": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "487": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "489": {
      "op": "itxn_submit"
    },
    "490": {
      "op": "itxn_begin"
    },
    "491": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "492": {
      "op": "bytec_2 // \"Gold_id\"",
      "defined_out": [
        "\"Gold_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"Gold_id\""
      ]
    },
    "493": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "494": {
      "error": "check self.Gold_id exists",
      "op": "assert // check self.Gold_id exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "495": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%3%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%3%%param_AssetReceiver_idx_0#0"
      ]
    },
    "497": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%3%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%3%%param_AssetSender_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%3%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%3%%param_AssetSender_idx_0#0"
      ]
    },
    "499": {
      "op": "itxn_field AssetSender",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%3%%param_AssetReceiver_idx_0#0"
      ]
    },
    "501": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%3%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "502": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%3%%param_AssetReceiver_idx_0#0"
      ]
    },
    "504": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "506": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "508": {
      "op": "intc_2 // axfer",
      "stack_out": [
        "axfer"
      ]
    },
    "509": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "512": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "514": {
      "op": "itxn_submit"
    },
    "515": {
      "retsub": true,
      "op": "retsub"
    },
    "516": {
      "subroutine": "smart_contracts.rchain.contract.Rchain.buyAndMint",
      "params": {
        "amount_sent#0": "uint64",
        "payment#0": "uint64"
      },
      "block": "buyAndMint",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "519": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "521": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "523": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "525": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "526": {
      "op": "assert",
      "stack_out": []
    },
    "527": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "529": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "531": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "533": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "534": {
      "error": "not sent to this address",
      "op": "assert // not sent to this address",
      "stack_out": []
    },
    "535": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "537": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "539": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "541": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount_sent#0 (copy)",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "amount_sent#0 (copy)"
      ]
    },
    "543": {
      "op": "==",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "544": {
      "error": "amount sent is not correct",
      "op": "assert // amount sent is not correct",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "545": {
      "op": "dup",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "546": {
      "op": "pushint 200 // 200",
      "defined_out": [
        "200",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "200"
      ]
    },
    "549": {
      "op": ">=",
      "defined_out": [
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "550": {
      "error": "Minimum amount to send is 200USD",
      "op": "assert // Minimum amount to send is 200USD",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "551": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "1000000"
      ]
    },
    "555": {
      "op": "<",
      "defined_out": [
        "tmp%11#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0"
      ]
    },
    "556": {
      "op": "bz buyAndMint_else_body@2",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "559": {
      "op": "global CallerApplicationAddress"
    },
    "561": {
      "op": "intc_0 // 0"
    },
    "562": {
      "op": "bytec_0 // \"Bronze_id\""
    },
    "563": {
      "op": "app_global_get_ex"
    },
    "564": {
      "error": "check self.Bronze_id exists",
      "op": "assert // check self.Bronze_id exists"
    },
    "565": {
      "op": "asset_holding_get AssetBalance"
    },
    "567": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "568": {
      "error": "Out of bronze SBTs",
      "op": "assert // Out of bronze SBTs"
    },
    "569": {
      "op": "intc_0 // 0"
    },
    "570": {
      "op": "bytec_0 // \"Bronze_id\""
    },
    "571": {
      "op": "app_global_get_ex"
    },
    "572": {
      "error": "check self.Bronze_id exists",
      "op": "assert // check self.Bronze_id exists"
    },
    "573": {
      "block": "buyAndMint_after_if_else@6",
      "stack_in": [
        "tmp%6#0",
        "assetToTransfer#0"
      ],
      "op": "itxn_begin"
    },
    "574": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "assetToTransfer#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "576": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "assetToTransfer#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "1"
      ]
    },
    "577": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%6#0",
        "assetToTransfer#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "579": {
      "op": "itxn_field AssetReceiver",
      "defined_out": [
        "assetToTransfer#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "assetToTransfer#0"
      ]
    },
    "581": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "583": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "tmp%6#0",
        "axfer"
      ]
    },
    "584": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "586": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "587": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "589": {
      "op": "itxn_submit"
    },
    "590": {
      "retsub": true,
      "op": "retsub"
    },
    "591": {
      "block": "buyAndMint_else_body@2",
      "stack_in": [
        "tmp%6#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "593": {
      "op": "pushint 3000000 // 3000000",
      "defined_out": [
        "3000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "3000000"
      ]
    },
    "598": {
      "op": "<",
      "defined_out": [
        "tmp%15#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%15#0"
      ]
    },
    "599": {
      "op": "bz buyAndMint_else_body@4",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "602": {
      "op": "global CallerApplicationAddress"
    },
    "604": {
      "op": "intc_0 // 0"
    },
    "605": {
      "op": "bytec_1 // \"Silver_id\""
    },
    "606": {
      "op": "app_global_get_ex"
    },
    "607": {
      "error": "check self.Silver_id exists",
      "op": "assert // check self.Silver_id exists"
    },
    "608": {
      "op": "asset_holding_get AssetBalance"
    },
    "610": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "611": {
      "error": "Out of Silver SBTs",
      "op": "assert // Out of Silver SBTs"
    },
    "612": {
      "op": "intc_0 // 0"
    },
    "613": {
      "op": "bytec_1 // \"Silver_id\""
    },
    "614": {
      "op": "app_global_get_ex"
    },
    "615": {
      "error": "check self.Silver_id exists",
      "op": "assert // check self.Silver_id exists"
    },
    "616": {
      "op": "b buyAndMint_after_if_else@6"
    },
    "619": {
      "block": "buyAndMint_else_body@4",
      "stack_in": [
        "tmp%6#0"
      ],
      "op": "global CallerApplicationAddress",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%18#0"
      ]
    },
    "621": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%18#0",
        "0"
      ]
    },
    "622": {
      "op": "bytec_2 // \"Gold_id\"",
      "defined_out": [
        "\"Gold_id\"",
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%18#0",
        "0",
        "\"Gold_id\""
      ]
    },
    "623": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%18#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "624": {
      "error": "check self.Gold_id exists",
      "op": "assert // check self.Gold_id exists",
      "stack_out": [
        "tmp%6#0",
        "tmp%18#0",
        "maybe_value%4#0"
      ]
    },
    "625": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "627": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "tmp%6#0",
        "value%2#0"
      ]
    },
    "628": {
      "error": "Out of gold SBTs",
      "op": "assert // Out of gold SBTs",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "629": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "630": {
      "op": "bytec_2 // \"Gold_id\"",
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"Gold_id\""
      ]
    },
    "631": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetToTransfer#0",
        "maybe_exists%5#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "assetToTransfer#0",
        "maybe_exists%5#0"
      ]
    },
    "632": {
      "error": "check self.Gold_id exists",
      "op": "assert // check self.Gold_id exists",
      "stack_out": [
        "tmp%6#0",
        "assetToTransfer#0"
      ]
    },
    "633": {
      "op": "b buyAndMint_after_if_else@6"
    },
    "636": {
      "subroutine": "smart_contracts.rchain.contract.Rchain.AllocateFunds",
      "params": {
        "recipient#0": "bytes"
      },
      "block": "AllocateFunds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "639": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "641": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "642": {
      "op": "bytec_3 // \"last_distribution_time\"",
      "defined_out": [
        "\"last_distribution_time\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"last_distribution_time\""
      ]
    },
    "643": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "644": {
      "error": "check self.last_distribution_time exists",
      "op": "assert // check self.last_distribution_time exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "646": {
      "op": "bytec 8 // \"distribution_interval\"",
      "defined_out": [
        "\"distribution_interval\"",
        "0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "0",
        "\"distribution_interval\""
      ]
    },
    "648": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "649": {
      "error": "check self.distribution_interval exists",
      "op": "assert // check self.distribution_interval exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "650": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "651": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "652": {
      "error": "distribution interval not reached",
      "op": "assert // distribution interval not reached",
      "stack_out": []
    },
    "653": {
      "op": "global CallerApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "655": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "656": {
      "op": "bytec 5 // \"usdt_asset_id\"",
      "defined_out": [
        "\"usdt_asset_id\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"usdt_asset_id\""
      ]
    },
    "658": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "659": {
      "error": "check self.usdt_asset_id exists",
      "op": "assert // check self.usdt_asset_id exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0"
      ]
    },
    "660": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "poolBalance#0"
      ],
      "stack_out": [
        "poolBalance#0",
        "check%0#0"
      ]
    },
    "662": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "poolBalance#0"
      ]
    },
    "663": {
      "op": "dup",
      "defined_out": [
        "poolBalance#0",
        "poolBalance#0 (copy)"
      ],
      "stack_out": [
        "poolBalance#0",
        "poolBalance#0 (copy)"
      ]
    },
    "664": {
      "op": "assert",
      "stack_out": [
        "poolBalance#0"
      ]
    },
    "665": {
      "op": "intc_0 // 0",
      "stack_out": [
        "poolBalance#0",
        "0"
      ]
    },
    "666": {
      "op": "bytec 7 // \"distribution_percentage\"",
      "defined_out": [
        "\"distribution_percentage\"",
        "0",
        "poolBalance#0"
      ],
      "stack_out": [
        "poolBalance#0",
        "0",
        "\"distribution_percentage\""
      ]
    },
    "668": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "poolBalance#0"
      ],
      "stack_out": [
        "poolBalance#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "669": {
      "error": "check self.distribution_percentage exists",
      "op": "assert // check self.distribution_percentage exists",
      "stack_out": [
        "poolBalance#0",
        "maybe_value%3#0"
      ]
    },
    "670": {
      "op": "*",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "671": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "100"
      ]
    },
    "672": {
      "op": "/",
      "defined_out": [
        "distribution_amount#0"
      ],
      "stack_out": [
        "distribution_amount#0"
      ]
    },
    "673": {
      "op": "itxn_begin"
    },
    "674": {
      "op": "intc_0 // 0",
      "stack_out": [
        "distribution_amount#0",
        "0"
      ]
    },
    "675": {
      "op": "bytec 5 // \"usdt_asset_id\"",
      "stack_out": [
        "distribution_amount#0",
        "0",
        "\"usdt_asset_id\""
      ]
    },
    "677": {
      "op": "app_global_get_ex",
      "defined_out": [
        "distribution_amount#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "678": {
      "error": "check self.usdt_asset_id exists",
      "op": "assert // check self.usdt_asset_id exists",
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%4#0"
      ]
    },
    "679": {
      "op": "dig 1",
      "defined_out": [
        "distribution_amount#0",
        "distribution_amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%4#0",
        "distribution_amount#0 (copy)"
      ]
    },
    "681": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%4#0"
      ]
    },
    "683": {
      "op": "frame_dig -1",
      "defined_out": [
        "distribution_amount#0",
        "maybe_value%4#0",
        "recipient#0 (copy)"
      ],
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%4#0",
        "recipient#0 (copy)"
      ]
    },
    "685": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%4#0"
      ]
    },
    "687": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "distribution_amount#0"
      ]
    },
    "689": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "distribution_amount#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "axfer"
      ]
    },
    "690": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "distribution_amount#0"
      ]
    },
    "692": {
      "op": "intc_0 // 0",
      "stack_out": [
        "distribution_amount#0",
        "0"
      ]
    },
    "693": {
      "op": "itxn_field Fee",
      "stack_out": [
        "distribution_amount#0"
      ]
    },
    "695": {
      "op": "itxn_submit"
    },
    "696": {
      "op": "intc_0 // 0",
      "stack_out": [
        "distribution_amount#0",
        "0"
      ]
    },
    "697": {
      "op": "bytec 6 // \"recipient_funding_left\"",
      "defined_out": [
        "\"recipient_funding_left\"",
        "0",
        "distribution_amount#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "0",
        "\"recipient_funding_left\""
      ]
    },
    "699": {
      "op": "app_global_get_ex",
      "defined_out": [
        "distribution_amount#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "700": {
      "error": "check self.recipient_funding_left exists",
      "op": "assert // check self.recipient_funding_left exists",
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%5#0"
      ]
    },
    "701": {
      "op": "dig 1",
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%5#0",
        "distribution_amount#0 (copy)"
      ]
    },
    "703": {
      "op": "-",
      "defined_out": [
        "distribution_amount#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "new_state_value%0#0"
      ]
    },
    "704": {
      "op": "bytec 6 // \"recipient_funding_left\"",
      "stack_out": [
        "distribution_amount#0",
        "new_state_value%0#0",
        "\"recipient_funding_left\""
      ]
    },
    "706": {
      "op": "swap",
      "stack_out": [
        "distribution_amount#0",
        "\"recipient_funding_left\"",
        "new_state_value%0#0"
      ]
    },
    "707": {
      "op": "app_global_put",
      "stack_out": [
        "distribution_amount#0"
      ]
    },
    "708": {
      "op": "bytec_3 // \"last_distribution_time\""
    },
    "709": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_distribution_time\"",
        "distribution_amount#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "\"last_distribution_time\"",
        "new_state_value%1#0"
      ]
    },
    "711": {
      "op": "app_global_put",
      "stack_out": [
        "distribution_amount#0"
      ]
    },
    "712": {
      "op": "intc_0 // 0",
      "stack_out": [
        "distribution_amount#0",
        "0"
      ]
    },
    "713": {
      "op": "bytec 4 // \"total_amount_left\"",
      "defined_out": [
        "\"total_amount_left\"",
        "0",
        "distribution_amount#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "0",
        "\"total_amount_left\""
      ]
    },
    "715": {
      "op": "app_global_get_ex",
      "defined_out": [
        "distribution_amount#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "716": {
      "error": "check self.total_amount_left exists",
      "op": "assert // check self.total_amount_left exists",
      "stack_out": [
        "distribution_amount#0",
        "maybe_value%6#0"
      ]
    },
    "717": {
      "op": "swap",
      "stack_out": [
        "maybe_value%6#0",
        "distribution_amount#0"
      ]
    },
    "718": {
      "op": "-",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "719": {
      "op": "bytec 4 // \"total_amount_left\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"total_amount_left\""
      ]
    },
    "721": {
      "op": "swap",
      "stack_out": [
        "\"total_amount_left\"",
        "new_state_value%2#0"
      ]
    },
    "722": {
      "op": "app_global_put",
      "stack_out": []
    },
    "723": {
      "retsub": true,
      "op": "retsub"
    }
  }
}