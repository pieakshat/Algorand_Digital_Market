/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Rchain","structs":{},"methods":[{"name":"initialise","args":[{"name":"usdt_id","type":"asset"},{"name":"distribution_interval","type":"uint64"},{"name":"total_amount_to_raise","type":"uint64"},{"name":"Recipient","type":"account"},{"name":"bronze_id","type":"asset"},{"name":"silver_id","type":"asset"},{"name":"gold_id","type":"asset"},{"name":"Recipient_funding_left","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"opt_in_to_asset","args":[{"name":"mbrpay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"buyAndMint","args":[{"name":"amount_sent","type":"uint64"},{"name":"payment","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"AllocateFunds","args":[{"name":"recipient","type":"account"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":9,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"Bronze_id":{"key":"QnJvbnplX2lk","keyType":"AVMString","valueType":"AVMUint64"},"Gold_id":{"key":"R29sZF9pZA==","keyType":"AVMString","valueType":"AVMUint64"},"Silver_id":{"key":"U2lsdmVyX2lk","keyType":"AVMString","valueType":"AVMUint64"},"distribution_interval":{"key":"ZGlzdHJpYnV0aW9uX2ludGVydmFs","keyType":"AVMString","valueType":"AVMUint64"},"distribution_percentage":{"key":"ZGlzdHJpYnV0aW9uX3BlcmNlbnRhZ2U=","keyType":"AVMString","valueType":"AVMUint64"},"last_distribution_time":{"key":"bGFzdF9kaXN0cmlidXRpb25fdGltZQ==","keyType":"AVMString","valueType":"AVMUint64"},"recipient":{"key":"cmVjaXBpZW50","keyType":"AVMString","valueType":"AVMBytes"},"recipient_funding_left":{"key":"cmVjaXBpZW50X2Z1bmRpbmdfbGVmdA==","keyType":"AVMString","valueType":"AVMUint64"},"total_amount_left":{"key":"dG90YWxfYW1vdW50X2xlZnQ=","keyType":"AVMString","valueType":"AVMUint64"},"usdt_asset_id":{"key":"dXNkdF9hc3NldF9pZA==","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Rchain contract
 */
export type RchainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void': {
      usdtId: bigint
      distributionInterval: bigint | number
      totalAmountToRaise: bigint | number
      recipient: Uint8Array | string
      bronzeId: bigint
      silverId: bigint
      goldId: bigint
      recipientFundingLeft: bigint | number
    }
    'opt_in_to_asset(pay)void': {
      mbrpay: AppMethodCallTransactionArgument
    }
    'buyAndMint(uint64,pay)void': {
      amountSent: bigint | number
      payment: AppMethodCallTransactionArgument
    }
    'AllocateFunds(account)void': {
      recipient: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void': [usdtId: bigint, distributionInterval: bigint | number, totalAmountToRaise: bigint | number, recipient: Uint8Array | string, bronzeId: bigint, silverId: bigint, goldId: bigint, recipientFundingLeft: bigint | number]
    'opt_in_to_asset(pay)void': [mbrpay: AppMethodCallTransactionArgument]
    'buyAndMint(uint64,pay)void': [amountSent: bigint | number, payment: AppMethodCallTransactionArgument]
    'AllocateFunds(account)void': [recipient: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type RchainReturns = {
  'initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void': void
  'opt_in_to_asset(pay)void': void
  'buyAndMint(uint64,pay)void': void
  'AllocateFunds(account)void': void
}

/**
 * Defines the types of available calls and state of the Rchain smart contract.
 */
export type RchainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void' | 'initialise', {
      argsObj: RchainArgs['obj']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']
      argsTuple: RchainArgs['tuple']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']
      returns: RchainReturns['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']
    }>
    & Record<'opt_in_to_asset(pay)void' | 'opt_in_to_asset', {
      argsObj: RchainArgs['obj']['opt_in_to_asset(pay)void']
      argsTuple: RchainArgs['tuple']['opt_in_to_asset(pay)void']
      returns: RchainReturns['opt_in_to_asset(pay)void']
    }>
    & Record<'buyAndMint(uint64,pay)void' | 'buyAndMint', {
      argsObj: RchainArgs['obj']['buyAndMint(uint64,pay)void']
      argsTuple: RchainArgs['tuple']['buyAndMint(uint64,pay)void']
      returns: RchainReturns['buyAndMint(uint64,pay)void']
    }>
    & Record<'AllocateFunds(account)void' | 'AllocateFunds', {
      argsObj: RchainArgs['obj']['AllocateFunds(account)void']
      argsTuple: RchainArgs['tuple']['AllocateFunds(account)void']
      returns: RchainReturns['AllocateFunds(account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        bronzeId: bigint
        goldId: bigint
        silverId: bigint
        distributionInterval: bigint
        distributionPercentage: bigint
        lastDistributionTime: bigint
        recipient: BinaryState
        recipientFundingLeft: bigint
        totalAmountLeft: bigint
        usdtAssetId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RchainSignatures = keyof RchainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RchainNonVoidMethodSignatures = keyof RchainTypes['methods'] extends infer T ? T extends keyof RchainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Rchain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RchainSignatures> = RchainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Rchain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RchainSignatures> = RchainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RchainTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type RchainCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type RchainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: RchainCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Rchain smart contract
 */
export abstract class RchainParamsFactory {
  /**
   * Constructs a no op call for the initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialise(params: CallParams<RchainArgs['obj']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void'] | RchainArgs['tuple']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.usdtId, params.args.distributionInterval, params.args.totalAmountToRaise, params.args.recipient, params.args.bronzeId, params.args.silverId, params.args.goldId, params.args.recipientFundingLeft],
    }
  }
  /**
   * Constructs a no op call for the opt_in_to_asset(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<RchainArgs['obj']['opt_in_to_asset(pay)void'] | RchainArgs['tuple']['opt_in_to_asset(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_to_asset(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrpay],
    }
  }
  /**
   * Constructs a no op call for the buyAndMint(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyAndMint(params: CallParams<RchainArgs['obj']['buyAndMint(uint64,pay)void'] | RchainArgs['tuple']['buyAndMint(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buyAndMint(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountSent, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the AllocateFunds(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static allocateFunds(params: CallParams<RchainArgs['obj']['AllocateFunds(account)void'] | RchainArgs['tuple']['AllocateFunds(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'AllocateFunds(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipient],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Rchain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RchainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RchainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RchainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new RchainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Rchain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RchainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new RchainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Rchain smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Rchain smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Rchain smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new RchainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Rchain smart contract
 */
export class RchainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RchainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Rchain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RchainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RchainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `RchainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<RchainClient> {
    return new RchainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `RchainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<RchainClient> {
    return new RchainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Rchain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Rchain smart contract using the `initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialise: (params: CallParams<RchainArgs['obj']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void'] | RchainArgs['tuple']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RchainParamsFactory.initialise(params))
    },

    /**
     * Makes a call to the Rchain smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<RchainArgs['obj']['opt_in_to_asset(pay)void'] | RchainArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RchainParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the Rchain smart contract using the `buyAndMint(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyAndMint: (params: CallParams<RchainArgs['obj']['buyAndMint(uint64,pay)void'] | RchainArgs['tuple']['buyAndMint(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RchainParamsFactory.buyAndMint(params))
    },

    /**
     * Makes a call to the Rchain smart contract using the `AllocateFunds(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    allocateFunds: (params: CallParams<RchainArgs['obj']['AllocateFunds(account)void'] | RchainArgs['tuple']['AllocateFunds(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RchainParamsFactory.allocateFunds(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Rchain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Rchain smart contract using the `initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialise: (params: CallParams<RchainArgs['obj']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void'] | RchainArgs['tuple']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RchainParamsFactory.initialise(params))
    },

    /**
     * Makes a call to the Rchain smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<RchainArgs['obj']['opt_in_to_asset(pay)void'] | RchainArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RchainParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the Rchain smart contract using the `buyAndMint(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyAndMint: (params: CallParams<RchainArgs['obj']['buyAndMint(uint64,pay)void'] | RchainArgs['tuple']['buyAndMint(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RchainParamsFactory.buyAndMint(params))
    },

    /**
     * Makes a call to the Rchain smart contract using the `AllocateFunds(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    allocateFunds: (params: CallParams<RchainArgs['obj']['AllocateFunds(account)void'] | RchainArgs['tuple']['AllocateFunds(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RchainParamsFactory.allocateFunds(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Rchain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Rchain smart contract using the `initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialise: async (params: CallParams<RchainArgs['obj']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void'] | RchainArgs['tuple']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RchainParamsFactory.initialise(params))
      return {...result, return: result.return as unknown as (undefined | RchainReturns['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void'])}
    },

    /**
     * Makes a call to the Rchain smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<RchainArgs['obj']['opt_in_to_asset(pay)void'] | RchainArgs['tuple']['opt_in_to_asset(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RchainParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | RchainReturns['opt_in_to_asset(pay)void'])}
    },

    /**
     * Makes a call to the Rchain smart contract using the `buyAndMint(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyAndMint: async (params: CallParams<RchainArgs['obj']['buyAndMint(uint64,pay)void'] | RchainArgs['tuple']['buyAndMint(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RchainParamsFactory.buyAndMint(params))
      return {...result, return: result.return as unknown as (undefined | RchainReturns['buyAndMint(uint64,pay)void'])}
    },

    /**
     * Makes a call to the Rchain smart contract using the `AllocateFunds(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    allocateFunds: async (params: CallParams<RchainArgs['obj']['AllocateFunds(account)void'] | RchainArgs['tuple']['AllocateFunds(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RchainParamsFactory.allocateFunds(params))
      return {...result, return: result.return as unknown as (undefined | RchainReturns['AllocateFunds(account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RchainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Rchain app
   */
  state = {
    /**
     * Methods to access global state for the current Rchain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          bronzeId: result.Bronze_id,
          goldId: result.Gold_id,
          silverId: result.Silver_id,
          distributionInterval: result.distribution_interval,
          distributionPercentage: result.distribution_percentage,
          lastDistributionTime: result.last_distribution_time,
          recipient: new BinaryStateValue(result.recipient),
          recipientFundingLeft: result.recipient_funding_left,
          totalAmountLeft: result.total_amount_left,
          usdtAssetId: result.usdt_asset_id,
        }
      },
      /**
       * Get the current value of the Bronze_id key in global state
       */
      bronzeId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bronzeId")) as bigint | undefined },
      /**
       * Get the current value of the Gold_id key in global state
       */
      goldId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("goldId")) as bigint | undefined },
      /**
       * Get the current value of the Silver_id key in global state
       */
      silverId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("silverId")) as bigint | undefined },
      /**
       * Get the current value of the distribution_interval key in global state
       */
      distributionInterval: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("distributionInterval")) as bigint | undefined },
      /**
       * Get the current value of the distribution_percentage key in global state
       */
      distributionPercentage: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("distributionPercentage")) as bigint | undefined },
      /**
       * Get the current value of the last_distribution_time key in global state
       */
      lastDistributionTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastDistributionTime")) as bigint | undefined },
      /**
       * Get the current value of the recipient key in global state
       */
      recipient: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("recipient")) as Uint8Array | undefined) },
      /**
       * Get the current value of the recipient_funding_left key in global state
       */
      recipientFundingLeft: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recipientFundingLeft")) as bigint | undefined },
      /**
       * Get the current value of the total_amount_left key in global state
       */
      totalAmountLeft: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAmountLeft")) as bigint | undefined },
      /**
       * Get the current value of the usdt_asset_id key in global state
       */
      usdtAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("usdtAssetId")) as bigint | undefined },
    },
  }

  public newGroup(): RchainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void method call against the Rchain contract
       */
      initialise(params: CallParams<RchainArgs['obj']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void'] | RchainArgs['tuple']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialise(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_in_to_asset(pay)void method call against the Rchain contract
       */
      optInToAsset(params: CallParams<RchainArgs['obj']['opt_in_to_asset(pay)void'] | RchainArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buyAndMint(uint64,pay)void method call against the Rchain contract
       */
      buyAndMint(params: CallParams<RchainArgs['obj']['buyAndMint(uint64,pay)void'] | RchainArgs['tuple']['buyAndMint(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyAndMint(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a AllocateFunds(account)void method call against the Rchain contract
       */
      allocateFunds(params: CallParams<RchainArgs['obj']['AllocateFunds(account)void'] | RchainArgs['tuple']['AllocateFunds(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.allocateFunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Rchain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as RchainComposer
  }
}
export type RchainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialise(params?: CallParams<RchainArgs['obj']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void'] | RchainArgs['tuple']['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void']>): RchainComposer<[...TReturns, RchainReturns['initialise(asset,uint64,uint64,account,asset,asset,asset,uint64)void'] | undefined]>

  /**
   * Calls the opt_in_to_asset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<RchainArgs['obj']['opt_in_to_asset(pay)void'] | RchainArgs['tuple']['opt_in_to_asset(pay)void']>): RchainComposer<[...TReturns, RchainReturns['opt_in_to_asset(pay)void'] | undefined]>

  /**
   * Calls the buyAndMint(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyAndMint(params?: CallParams<RchainArgs['obj']['buyAndMint(uint64,pay)void'] | RchainArgs['tuple']['buyAndMint(uint64,pay)void']>): RchainComposer<[...TReturns, RchainReturns['buyAndMint(uint64,pay)void'] | undefined]>

  /**
   * Calls the AllocateFunds(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  allocateFunds(params?: CallParams<RchainArgs['obj']['AllocateFunds(account)void'] | RchainArgs['tuple']['AllocateFunds(account)void']>): RchainComposer<[...TReturns, RchainReturns['AllocateFunds(account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Rchain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RchainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RchainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RchainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<RchainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<RchainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RchainComposerResults<TReturns>>
}
export type RchainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

